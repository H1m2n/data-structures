Q: Binary Tree?
Ans: In binary tree, a parent node has either 0 child or 2 child node that's why binary tree.

Q: BST
Ans: In binary search tree nodes are arranged in such like that a parent node either has 0 node or if it has any child node
then left side node have value will be less than parent node's value and right side node have value will be greater than parent node's value.
eg:      5
       /   \
      3     7
     / \     \
    1   4     8

Q: Perfect BST
Ans: A BST where parent node will have 0 node or 2 nodes
eg:      5
       /   \
      3     7
     / \   /  \
    1   4  6   8

Q: Time complexity?
Ans: insert - O(log n)
     lookup - O(log n)
     remove - O(log n)

nodes = 2^height - 1
nodes in example tree = 2^3 - 1 = 7

because log n < n as in case of BST we don't need to traverse through all elements as in array because of its property
of parent child relation that's why for operations like insert and delete BST is better that Array. Meanwhile
lookup is good in Array(O(1)) than BST(O(log n))


Q: Balanced and Unbalanced Tree
Ans: For worst case it could be possible that if suppose elements are like
1,2,3,4,5,6,7,8,10
then Tree is unbalanced because of its parent child relationship law due to that time complexity can be increased to
O(n). There are some solutions to avoid unbalanced tree type of formation.

class Node:
   def __init__(value):
      self.value = value
      self.left = None
      self.right = None

class BST:
   def __int__:
      self.root = None

insert(value):
   new_node = Node(value)
   if self.root is None:
       self.root = new_node
   else:
       curr_node = self.root
       while(True):
          if value > curr_node.value:
            tmp_node = curr_node.right
            if tmp_node is None:
                curr_node.right = new_node
                break
            else:
                curr_node = tmp_node
          else:
            tmp_node = curr_node.left
            if tmp_node is None:
               curr_node.left = new_node
               break
            else:
               curr_node = tmp_node



lookup(value):
  if self.root is None:
    return False
  else:
    curr_node = self.root
    while(True):
        if curr_node is None:
            return False

        if curr_node.value == value:
            return curr_node

        if value < curr_node.value:
            curr_node = curr_node.left
        else:
            curr_node = curr_node.right



remove(value):
    if self.root is None
        return
    else:
        curr_node = self.root
        parent_node = None
        while(curr_node):
            if curr_node.value == value:
                break

            parent_node = curr_node
            if value < curr_node.value:
                curr_node = curr_node.left
            else:
                curr_node = curr_node.right

        if not curr_node:
            return "No element found to remove"


        if parent_node:
            # check if curr_node node is a leaf node
            if curr_node.left is None and curr_node.right is None:
                pass
            elif curr_node.left is None and curr_node.right:
                parent_node.right = curr_node.right
            elif curr_node.right is None and curr_node.left:
                parent_node.left = curr_node.left
            else:
                if curr_node.right.left is None:
                    parent_node.right = curr_node.right
                    curr_node.left = parent_node.right
                else:
                    leaf_left_node = curr_node.left
                    while(leaf_left_node):
                        leaf_left_node = leaf_left_node.left
                    parent_node.right = leaf_left_node
                    leaf_left_node.left = curr_node.left
                    leaf_left_node.right = curr_node.right

        else:
            # we are removing root node




eg:      5
       /   \
      3     7
     / \   /  \
    1   4  6   10
               / \
             9   15
             /    \
            8       16

 output after removing 10 -->
         5
       /   \
      3     7
     / \   /  \
    1   4  6   15
               / \
             9   16
            /
           8

 output after removing 7 -->
         5
       /   \
      3     8
     / \   /  \
    1   4  6   15
               / \
             9   16




BST can be unbalanced, so we need to have balance BST on prod env.
Balanced bST technique are
1. AVL Tree
2. Red Black Tree (Red black tree is almost same as AVL tree, the difference is not as restricted as AVL tree)

Q: How we check a tree is balance or not?
Ans: We have to calculate balance factor of each node. If balance factor lies in -1, 0, 1, for every node then tree
     is balanced otherwise unbalanced.

Q: How we calculate balance factor?
Ans: balance factor = height of left - height of right
Ans: eg:            10 --> 2 - 0 = 2
                   /
                  5 --> 1-0 = 0
                  /
                 1--> 0

                 10 -----> 1 - 2 = -1
                /  \
          0<---5   30 ---> 0 - 1 = -1
                     \
                      40 --> 0
Q: How we balance a tree?
Ans: Tree can be unbalanced when we just inserted a new node. So to balance it we need to perform rotation
1. LL -> used if tree is unbalanced due to left of left insertion
2. RR -> used if tree is unbalanced due to right of right insertion
3. LR -> used if tree is unbalanced due to right of left insertion
4. RL -> used if tree is unbalanced due to left of right insertion


LL Rotation:
    We fix a nail on imbalanced node and then we pull thread towards RIGHT

RR Rotation:
    We fix a nail on imbalanced node and then we pull thread towards LEFT

LR Rotation:
    Here we need 2 step rotation. For balancing, first we need to rotate 3rd node at LEFT side and then
    imbalanced node towards RIGHT.

RL Rotation:
    Here we need 2 step rotation. For balancing, first we need to rotate 3rd node at RIGHT side and then
    imbalanced node towards LEFT.


                         40
                        /  \
                       30  50
                      / \    \
                     20  25   60
                    /
                   10
                  /
                 1

    Note: WHEN WE INSERTED A NEW NODE, WE NEED TO CALCULATE BALANCE FACTOR OF A SUBTREE UNTIL WE FOUND A IMBALANCED NODE
    AS SOON AS WE FOUND AN IMBALANCED NODE. WE HAVE TO BALANCE ONLY THAT SUBTREE, AUTOMATICALLY SUBTREE AT ITS TOP WILL
    BE BALANCED. AND RIGHT OR LEFT SUBTREE NEED TO BE PLACED WHERE LEFT OR RIGHT POINTER IS NOT AVAILABLE.
